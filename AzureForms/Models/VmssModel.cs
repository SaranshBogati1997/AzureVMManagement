// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using AzureForms.Models;
//
//    var vmssModel = VmssModel.FromJson(jsonString);

namespace AzureForms.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class VmssModel
    {
        [JsonProperty("value")]
        public Value[] Value { get; set; }
    }

    public partial class Value
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("location")]
        public string Location { get; set; }

        [JsonProperty("instanceId")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long InstanceId { get; set; }

        [JsonProperty("sku")]
        public Sku Sku { get; set; }

        [JsonProperty("properties")]
        public ValueProperties Properties { get; set; }

        [JsonProperty("zones")]
        [JsonConverter(typeof(DecodeArrayConverter))]
        public long[] Zones { get; set; }
    }

    public partial class ValueProperties
    {
        [JsonProperty("latestModelApplied")]
        public bool LatestModelApplied { get; set; }

        [JsonProperty("modelDefinitionApplied")]
        public string ModelDefinitionApplied { get; set; }

        [JsonProperty("networkProfileConfiguration")]
        public NetworkProfileConfiguration NetworkProfileConfiguration { get; set; }

        [JsonProperty("vmId")]
        public Guid VmId { get; set; }

        [JsonProperty("hardwareProfile")]
        public HardwareProfile HardwareProfile { get; set; }

        [JsonProperty("storageProfile")]
        public StorageProfile StorageProfile { get; set; }

        [JsonProperty("osProfile")]
        public OsProfile OsProfile { get; set; }

        [JsonProperty("networkProfile")]
        public NetworkProfile NetworkProfile { get; set; }

        [JsonProperty("diagnosticsProfile")]
        public DiagnosticsProfile DiagnosticsProfile { get; set; }

        [JsonProperty("provisioningState")]
        public string ProvisioningState { get; set; }

        [JsonProperty("priority")]
        public string Priority { get; set; }
    }

    public partial class DiagnosticsProfile
    {
        [JsonProperty("bootDiagnostics")]
        public BootDiagnostics BootDiagnostics { get; set; }
    }

    public partial class BootDiagnostics
    {
        [JsonProperty("enabled")]
        public bool Enabled { get; set; }
    }

    public partial class HardwareProfile
    {
    }

    public partial class NetworkProfile
    {
        [JsonProperty("networkInterfaces")]
        public NetworkInterface[] NetworkInterfaces { get; set; }
    }

    public partial class NetworkInterface
    {
        [JsonProperty("id")]
        public string Id { get; set; }
    }

    public partial class NetworkProfileConfiguration
    {
        [JsonProperty("networkInterfaceConfigurations")]
        public NetworkInterfaceConfiguration[] NetworkInterfaceConfigurations { get; set; }
    }

    public partial class NetworkInterfaceConfiguration
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("properties")]
        public NetworkInterfaceConfigurationProperties Properties { get; set; }
    }

    public partial class NetworkInterfaceConfigurationProperties
    {
        [JsonProperty("primary")]
        public bool Primary { get; set; }

        [JsonProperty("enableAcceleratedNetworking")]
        public bool EnableAcceleratedNetworking { get; set; }

        [JsonProperty("networkSecurityGroup")]
        public NetworkInterface NetworkSecurityGroup { get; set; }

        [JsonProperty("dnsSettings")]
        public DnsSettings DnsSettings { get; set; }

        [JsonProperty("enableIPForwarding")]
        public bool EnableIpForwarding { get; set; }

        [JsonProperty("ipConfigurations")]
        public IpConfiguration[] IpConfigurations { get; set; }
    }

    public partial class DnsSettings
    {
        [JsonProperty("dnsServers")]
        public object[] DnsServers { get; set; }
    }

    public partial class IpConfiguration
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("properties")]
        public IpConfigurationProperties Properties { get; set; }
    }

    public partial class IpConfigurationProperties
    {
        [JsonProperty("primary")]
        public bool Primary { get; set; }

        [JsonProperty("subnet")]
        public NetworkInterface Subnet { get; set; }

        [JsonProperty("privateIPAddressVersion")]
        public string PrivateIpAddressVersion { get; set; }

        [JsonProperty("publicIPAddressConfiguration")]
        public PublicIpAddressConfiguration PublicIpAddressConfiguration { get; set; }

    }
    public partial class PublicIpAddressConfiguration
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("properties")]
        public PublicIpAddressConfigurationProperties Properties { get; set; }
    }
    public partial class PublicIpAddressConfigurationProperties
    {
        [JsonProperty("idleTimeoutInMinutes")]
        public long IdleTimeoutInMinutes { get; set; }

        [JsonProperty("ipTags")]
        public object[] IpTags { get; set; }

        [JsonProperty("publicIPAddressVersion")]
        public string PublicIpAddressVersion { get; set; }
    }
    public partial class OsProfile
    {
        [JsonProperty("computerName")]
        public string ComputerName { get; set; }

        [JsonProperty("adminUsername")]
        public string AdminUsername { get; set; }

        [JsonProperty("windowsConfiguration")]
        public WindowsConfiguration WindowsConfiguration { get; set; }

        [JsonProperty("secrets")]
        public object[] Secrets { get; set; }

        [JsonProperty("allowExtensionOperations")]
        public bool AllowExtensionOperations { get; set; }

        [JsonProperty("requireGuestProvisionSignal")]
        public bool RequireGuestProvisionSignal { get; set; }
    }

    public partial class WindowsConfiguration
    {
        [JsonProperty("provisionVMAgent")]
        public bool ProvisionVmAgent { get; set; }

        [JsonProperty("enableAutomaticUpdates")]
        public bool EnableAutomaticUpdates { get; set; }
    }

    public partial class StorageProfile
    {
        [JsonProperty("imageReference")]
        public ImageReference ImageReference { get; set; }

        [JsonProperty("osDisk")]
        public OsDisk OsDisk { get; set; }

        [JsonProperty("dataDisks")]
        public object[] DataDisks { get; set; }
    }

    public partial class ImageReference
    {
        [JsonProperty("publisher")]
        public string Publisher { get; set; }

        [JsonProperty("offer")]
        public string Offer { get; set; }

        [JsonProperty("sku")]
        public string Sku { get; set; }

        [JsonProperty("version")]
        public string Version { get; set; }

        [JsonProperty("exactVersion")]
        public string ExactVersion { get; set; }
    }

    public partial class OsDisk
    {
        [JsonProperty("osType")]
        public string OsType { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("createOption")]
        public string CreateOption { get; set; }

        [JsonProperty("caching")]
        public string Caching { get; set; }

        [JsonProperty("managedDisk")]
        public ManagedDisk ManagedDisk { get; set; }

        [JsonProperty("diskSizeGB", NullValueHandling = NullValueHandling.Ignore)]
        public long? DiskSizeGb { get; set; }
    }

    public partial class ManagedDisk
    {
        [JsonProperty("storageAccountType", NullValueHandling = NullValueHandling.Ignore)]
        public string StorageAccountType { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }
    }

    public partial class Sku
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("tier")]
        public string Tier { get; set; }
    }

    public partial class VmssModel
    {
        public static VmssModel FromJson(string json) => JsonConvert.DeserializeObject<VmssModel>(json, AzureForms.Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this VmssModel self) => JsonConvert.SerializeObject(self, AzureForms.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class DecodeArrayConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long[]);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            reader.Read();
            var value = new List<long>();
            while (reader.TokenType != JsonToken.EndArray)
            {
                var converter = ParseStringConverter.Singleton;
                var arrayItem = (long)converter.ReadJson(reader, typeof(long), null, serializer);
                value.Add(arrayItem);
                reader.Read();
            }
            return value.ToArray();
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (long[])untypedValue;
            writer.WriteStartArray();
            foreach (var arrayItem in value)
            {
                var converter = ParseStringConverter.Singleton;
                converter.WriteJson(writer, arrayItem, serializer);
            }
            writer.WriteEndArray();
            return;
        }

        public static readonly DecodeArrayConverter Singleton = new DecodeArrayConverter();
    }
}
